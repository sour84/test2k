<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
    <jpa:repositories base-package="my.test.repository" entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="seaTxManager"/>
    <context:component-scan base-package="my.test"/>
    <!-- context:component-scan This tag will scan @Component, @Repository, @Service, @Controller
         and also resolves @Autowired and @Qualifier -->
    <tx:annotation-driven transaction-manager="seaTxManager" />

    <!--
        mvc:annotation-driven configures Spring MVC annotations
        Support for validating @Controller inputs with @Valid, if a JSR-303 Provider is present on the classpath.
        HttpMessageConverter support for @RequestBody method parameters and @ResponseBody method return values
        from @RequestMapping or @ExceptionHandler methods.
     -->
    <mvc:annotation-driven/>

    <!-- ViewResolver bean config for mapping strings to jsp views -->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
        <!--&lt;!&ndash; Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp' &ndash;&gt;-->
        <!--<property name="order" value="1" />-->
        <!--<property name="prefix" value="/WEB-INF/view/" />-->
        <!--<property name="suffix" value=".jsp" />-->

    <!--</bean>-->


    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/view/" />
        <property name="suffix" value=".jsp" />
        <property name="order" value="1" />

    </bean>
    <!-- SpringResourceTemplateResolver automatically integrates with Spring's own -->
    <!-- resource resolution infrastructure, which is highly recommended.          -->

    <!--&lt;!&ndash; File Upload bean config&ndash;&gt;-->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--&lt;!&ndash; set the maximum file size in bytes &ndash;&gt;-->
        <!--<property name="maxUploadSize" value="1000000"/>-->
    <!--</bean>-->

    <!--Excel and PDF xml view configuration -->
    <!--disabling for jUnit test. -->
    <!--<bean class="org.springframework.web.servlet.view.XmlViewResolver">-->
        <!--<property name="order" value="0" />-->
        <!--<property name="location" value="/WEB-INF/config/excel-pdf-config.xml"/>-->
    <!--</bean>-->

    <mvc:view-controller path="/index.html" view-name="/orm/test"/>
    <mvc:view-controller path="/about.html" view-name="/about/about"/>
    <mvc:view-controller path="/file.html" view-name="/file/file"/>
    <mvc:view-controller path="/jdbc.html" view-name="/jdbc/jdbc"/>
    <mvc:view-controller path="/email.html" view-name="/email/email"/>
    <mvc:view-controller path="/rest.html" view-name="/rest/rest"/>
    <mvc:view-controller path="/orm.html" view-name="/orm/orm"/>
    <mvc:view-controller path="/person.html" view-name="/orm/person"/>

    <!-- Static Resources Configuration (get access to static sources such as CSS and JavaScript files) -->
    <!--<mvc:resources mapping="/resources/**" location="/resources/" />-->
    <mvc:resources mapping="/webjars/**" location="/webjars/"/>
    <!-- themes can be put in different folder such as
        <mvc:resources mapping="/resources/**" location="/resources/themeBlue" />
        <mvc:resources mapping="/resources/**" location="/resources/themeGreen" />
     -->

</beans>